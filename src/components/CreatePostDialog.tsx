import { useState } from "react";
import { spamProtection } from "@/lib/utils-school";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Send, Lightbulb } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface CreatePostDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (postData: any) => void;
}

const categories = [
  { value: '–ò–¥–µ—è', label: '–ò–¥–µ—è', icon: 'üí°' },
  { value: '–ñ–∞–ª–æ–±–∞', label: '–ñ–∞–ª–æ–±–∞', icon: 'üòî' },
  { value: '–ü—Ä–æ–±–ª–µ–º–∞', label: '–ü—Ä–æ–±–ª–µ–º–∞', icon: 'üòê' },
  { value: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', label: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', icon: 'üòä' },
  { value: '–£—Å–ø–µ—Ö', label: '–£—Å–ø–µ—Ö / –ü–æ—Ö–≤–∞–ª–∞', icon: 'üòç' }
];

export function CreatePostDialog({ open, onOpenChange, onSubmit }: CreatePostDialogProps) {
  const [formData, setFormData] = useState({
    category: '',
    title: '',
    content: '',
    showName: false,
    authorName: ''
  });
  const { toast } = useToast();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.category || !formData.title || !formData.content) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive"
      });
      return;
    }

    // Check spam protection
    if (!spamProtection.canPost()) {
      const remaining = Math.ceil(spamProtection.getCooldownRemaining() / 1000);
      toast({
        title: "–ü–æ–¥–æ–∂–¥–∏—Ç–µ",
        description: `–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ ${remaining} —Å–µ–∫—É–Ω–¥`,
        variant: "destructive"
      });
      return;
    }

    spamProtection.recordPost();
    onSubmit(formData);
    setFormData({
      category: '',
      title: '',
      content: '',
      showName: false,
      authorName: ''
    });
    onOpenChange(false);
    
    toast({
      title: "–°–ø–∞—Å–∏–±–æ!",
      description: "–í–∞—à –≥–æ–ª–æ—Å –≤–∞–∂–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.",
      className: "bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20"
    });
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="card-glow max-w-2xl animate-scale-in">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-2xl">
            <Lightbulb className="w-6 h-6 text-primary" />
            –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º
          </DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="category" className="text-sm font-medium">
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
            </Label>
            <Select value={formData.category} onValueChange={(value) => setFormData({...formData, category: value})}>
              <SelectTrigger className="bg-background/50 border-border/50 focus:border-primary/50">
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
              </SelectTrigger>
              <SelectContent className="card-glow">
                {categories.map((cat) => (
                  <SelectItem key={cat.value} value={cat.value} className="hover:bg-primary/10">
                    <div className="flex items-center gap-2">
                      <span className="text-lg">{cat.icon}</span>
                      <span>{cat.label}</span>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="title" className="text-sm font-medium">
              –ó–∞–≥–æ–ª–æ–≤–æ–∫ *
            </Label>
            <Input
              id="title"
              value={formData.title}
              onChange={(e) => setFormData({...formData, title: e.target.value})}
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
              className="bg-background/50 border-border/50 focus:border-primary/50"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="content" className="text-sm font-medium">
              –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è *
            </Label>
            <Textarea
              id="content"
              value={formData.content}
              onChange={(e) => setFormData({...formData, content: e.target.value})}
              placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –∏–¥–µ–µ, –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏..."
              rows={5}
              className="bg-background/50 border-border/50 focus:border-primary/50 resize-none"
            />
          </div>

          <div className="space-y-3">
            <div className="flex items-center space-x-2">
              <Checkbox
                id="showName"
                checked={formData.showName}
                onCheckedChange={(checked) => setFormData({...formData, showName: checked as boolean})}
                className="border-border/50 data-[state=checked]:bg-primary data-[state=checked]:border-primary"
              />
              <Label
                htmlFor="showName"
                className="text-sm cursor-pointer"
              >
                –£–∫–∞–∑–∞—Ç—å –∏–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </Label>
            </div>

            {formData.showName && (
              <Input
                value={formData.authorName}
                onChange={(e) => setFormData({...formData, authorName: e.target.value})}
                placeholder="–í–∞—à–µ –∏–º—è"
                className="bg-background/50 border-border/50 focus:border-primary/50"
              />
            )}
          </div>

          <div className="flex gap-3 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              className="flex-1"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              type="submit"
              className="flex-1 button-glow"
            >
              <Send className="w-4 h-4 mr-2" />
              –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}